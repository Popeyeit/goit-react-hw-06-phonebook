{"version":3,"sources":["redux/contacts/contactsActions.js","redux/contacts/contactsConstants.js","redux/contacts/contactsReducers.js","redux/store.js","components/Form/Form.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["addContact","createAction","removeItem","filterItems","toggle","items","createReducer","state","action","payload","filter","contact","id","hasNameInContacts","combineReducers","configureStore","reducer","contacts","contactsReduser","Form","name","number","changeValue","target","value","setState","hasContact","props","some","cont","handleSubmit","e","preventDefault","item","Date","now","this","onSubmit","className","type","placeholder","onChange","Component","mapDispatchToProps","connect","deleteContact","toLowerCase","includes","TransitionGroup","component","map","CSSTransition","key","classNames","timeout","onClick","App","isLoade","changeFilter","findContact","search","in","mountOnEnter","unmountOnExit","onEntered","length","console","log","ReactDOM","render","store","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53038015.chunk.js","sourcesContent":["import { ADD, REMOVE, FILTER, TOGGLE } from './contactsConstants';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction(ADD);\n\nexport const removeItem = createAction(REMOVE);\n\nexport const filterItems = createAction(FILTER);\n\nexport const toggle = createAction(TOGGLE);\n","export const ADD = 'contacnts/add';\nexport const REMOVE = 'contacts/romove';\nexport const FILTER = 'contacts/filter';\nexport const TOGGLE = 'contacts/toggle';\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, removeItem, filterItems, toggle } from './contactsActions';\nconst items = createReducer([], {\n  [addContact]: (state, action) => [...state, action.payload],\n  [removeItem]: (state, action) =>\n    state.filter(contact => contact.id !== action.payload),\n});\nconst filter = createReducer('', {\n  [filterItems]: (state, action) => action.payload,\n});\nconst hasNameInContacts = createReducer(false, {\n  [toggle]: (state, action) => action.payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  hasNameInContacts,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReduser from './contacts/contactsReducers';\n\nexport default configureStore({\n  reducer: {\n    contacts: contactsReduser,\n  },\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addContact, toggle } from '../../redux/contacts/contactsActions';\nimport './Form.css';\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  changeValue = ({ target }) => {\n    const { value } = target;\n    const { name } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n  hasContact = name => {\n    const { contacts } = this.props;\n    return contacts.some(cont => cont.name === name);\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n\n    const item = {\n      id: Date.now(),\n      name,\n      number,\n    };\n    const hasNameIn = this.hasContact(item.name);\n    if (hasNameIn) {\n      this.props.toggle(true);\n      return;\n    }\n    this.props.addContact(item);\n    this.props.toggle(false);\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} className=\"form\">\n        <input\n          className=\"form-item\"\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          placeholder=\"Your name\"\n          onChange={this.changeValue}\n        />{' '}\n        <input\n          className=\"form-item\"\n          type=\"phone\"\n          placeholder=\"333-333-333\"\n          value={number}\n          name=\"number\"\n          onChange={this.changeValue}\n        />{' '}\n        <button className=\"form-btn\"> Add contact </button>{' '}\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: state.contacts.items,\n    hasNameInContacts: state.contacts.hasNameInContacts,\n  };\n};\nconst mapDispatchToProps = {\n  addContact,\n  toggle,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { removeItem } from '../../redux/contacts/contactsActions';\nimport './ContactList.css';\nconst ContactList = ({ contacts, deleteContact }) => {\n  return (\n    <TransitionGroup component=\"ul\" className=\"list\">\n      {contacts.map(({ name, number, id }) => {\n        return (\n          <CSSTransition key={id} classNames=\"change\" timeout={250}>\n            <li className=\"item\">\n              <p className=\"list-name\">{name} </p>\n              <p className=\"list-phone\">{number} </p>\n              <button onClick={() => deleteContact(id)} className=\"list-btn\">\n                X\n              </button>\n            </li>\n          </CSSTransition>\n        );\n      })}\n    </TransitionGroup>\n  );\n};\n\nconst mapStateToProps = state => {\n  const { filter, items } = state.contacts;\n  return {\n    contacts: filter\n      ? items.filter(item => {\n          return item.name.toLowerCase().includes(filter.toLowerCase());\n        })\n      : items,\n  };\n};\nconst mapDispatchToProps = {\n  deleteContact: removeItem,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport {\n  addContact,\n  toggle,\n  filterItems,\n} from './redux/contacts/contactsActions';\nimport Form from './components/Form/Form';\nimport ContactList from './components/ContactList/ContactList';\nimport './App.css';\nclass App extends Component {\n  state = {\n    isLoade: false,\n  };\n  changeFilter = e => {\n    this.props.filterItems(e.target.value);\n  };\n  findContact = () => {\n    const { contacts, search } = this.state;\n    if (search) {\n      return contacts.filter(item => item.name.includes(search));\n    }\n    return contacts;\n  };\n  componentDidMount() {\n    this.setState({ isLoade: true });\n  }\n\n  render() {\n    const { isLoade } = this.state;\n    const { contacts, hasNameInContacts, toggle, search } = this.props;\n    return (\n      <div>\n        <CSSTransition\n          classNames=\"phonebook\"\n          timeout={1500}\n          in={isLoade}\n          mountOnEnter\n        >\n          <div>\n            <h1>Phonebook</h1>\n          </div>\n        </CSSTransition>\n        <CSSTransition\n          in={hasNameInContacts}\n          classNames=\"alert\"\n          unmountOnExit\n          timeout={2500}\n          onEntered={() => toggle(false)}\n        >\n          <div className=\"alert-wrapper\">\n            <h1 className=\"alert-title\">\n              This name is have already in contacts list\n            </h1>\n          </div>\n        </CSSTransition>\n        <Form />\n        <CSSTransition\n          in={contacts.length > 1}\n          unmountOnExit\n          classNames=\"search\"\n          timeout={250}\n        >\n          <label className=\"form-label\">\n            <p>Find contacts by name:</p>\n            <input\n              type=\"text\"\n              name=\"search\"\n              value={search}\n              onChange={this.changeFilter}\n            />\n          </label>\n        </CSSTransition>\n\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { filter, items } = state.contacts;\n  console.log(filter);\n  console.log(items);\n  return {\n    contacts: items,\n    hasNameInContacts: state.contacts.hasNameInContacts,\n    search: state.contacts.filter,\n  };\n};\nconst mapDispatchToProps = {\n  addContact,\n  toggle,\n  filterItems,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>{' '}\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}